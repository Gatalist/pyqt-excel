from dataclasses import dataclass


@dataclass
class Variable:
    object_edition_read_text: str = "–ß–∏—Ç–∞—Ç—å"
    object_edition_change_text: str = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    
    object_option_read_col: str = '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É'
    object_option_check_start_end_str: str = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏'  
    object_search_text_str: str = '–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞'
    object_unique_strings_str: str = '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏'
    
    add_text_to_cell_start_txt: str = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ (–Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)'
    add_text_to_cell_end_txt: str = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–Ω–µ—Ü (–≤–µ–∑–¥–µ)'
    remove_text_from_cell_txt: str = '–£–¥–∞–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å—Ç–æ–ª–±—Ü–∞'
    move_text_to_another_cell_txt: str = '–í—ã–∑–µ—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –¥—Ä—É–≥—É—é —è—á–µ–π–∫—É (–≤–µ—Å—å)'
    serch_move_text_to_another_cell_txt: str = '–í—ã–∑–µ—Ä–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –¥—Ä—É–≥—É—é —è—á–µ–π–∫—É (–ø–æ–∏—Å–∫)'
    add_text_after_text_cell_txt: str = '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º'

    explorer_open_doc_txt = 'Open File'
    explorer_save_doc_txt = 'Save File'

    save_doc_text = '\n\nüíæ Save [ Document ]\n'
    faled_doc_text = '\n\n‚õîÔ∏è Failed to save [ Document ]\n'

    format_document = 'Excel (*.xlsx);;Excel (*.xls)'

class LogicsReadDocument(Variable):
    # –º–µ—Ç–æ–¥—ã –Ω–∞–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    def hiden_frame_col_1(self):
        self.frame_object_search_text.setVisible(False)

    
    def check_select_option_read(self):
        print("check select item")
        self.hiden_frame_col_1()
        if self.object_option_read.currentText() == self.object_search_text_str:
            self.frame_object_search_text.setVisible(True)


    def select_option_read(self):
        print("–ß–∏—Ç–∞—Ç—å")
        self.object_option_read.addItem(self.object_option_read_col)
        self.object_option_read.addItem(self.object_option_check_start_end_str)
        self.object_option_read.addItem(self.object_search_text_str)
        self.object_option_read.addItem(self.object_unique_strings_str)

    # –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    def btn_start_read(self):
        self.work_sheet = self.work_book[self.object_sheet.currentText()] # –ø–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        self.column_name = self.object_columns.currentText() # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã
        self.output_widget.clear() # –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.object_option_read.currentText()  # –ø–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        list_data = self.generate_list_data_row()
        method = self.object_option_read.currentText()
        
        if method == self.object_option_read_col:
            # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
            read = self.read_list_data_row(list_data, read_line=True)
            for string in read:
                self.output_widget.appendPlainText(string)
        
        if method == self.object_option_check_start_end_str:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–µ—Ä–≤—É—é –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É
            read = self.checking_is_title(list_data)
            for string in read:
                self.output_widget.appendPlainText(string)

        if method == self.object_search_text_str:
            # –∏—â–∏–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —è—á–µ–π–∫–µ
            obj_text = self.object_search_text.toPlainText()  # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞
            read = self.search_text(list_data=list_data, search=obj_text)
            for string in read:
                self.output_widget.appendPlainText(string)

        if method == self.object_unique_strings_str:
            read = self.get_unique_strings(list_data)
            for string in read:
                self.output_widget.appendPlainText(string)


class LogicsChangeDocument(Variable):
    def hiden_frame_col(self):
        self.frame_copy.setVisible(False)
        self.frame_past.setVisible(False)
        self.frame_object_search_text_2.setVisible(True)
        self.label_6.setVisible(False)
        self.label_10.setVisible(False)
        self.label_11.setVisible(False)
        self.object_after_text.setVisible(False)

    def check_select_option_change(self):
        print("check select item")
        self.hiden_frame_col()
        if self.object_option_change.currentText() == self.add_text_to_cell_start_txt:
            self.frame_past.setVisible(True)
        if self.object_option_change.currentText() == self.add_text_to_cell_end_txt:
            self.frame_past.setVisible(True)
        if self.object_option_change.currentText() == self.remove_text_from_cell_txt:
            self.frame_copy.setVisible(True)
        if self.object_option_change.currentText() == self.move_text_to_another_cell_txt:
            self.frame_copy.setVisible(True)
            self.frame_past.setVisible(True)
            self.frame_object_search_text_2.setVisible(False)
        if self.object_option_change.currentText() == self.serch_move_text_to_another_cell_txt:
            self.frame_copy.setVisible(True)
            self.frame_past.setVisible(True)
            self.label_6.setVisible(True)
        if self.object_option_change.currentText() == self.add_text_after_text_cell_txt:
            self.object_after_text.setVisible(True)
            self.frame_past.setVisible(True)
            self.label_6.setVisible(True)
            self.label_10.setVisible(True)
            self.label_11.setVisible(True)
        

    # –º–µ—Ç–æ–¥—ã –Ω–∞–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    def select_option_change(self):
        print("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.hiden_frame_col()
        self.object_option_change.addItem(self.add_text_to_cell_start_txt)
        self.object_option_change.addItem(self.add_text_to_cell_end_txt)
        self.object_option_change.addItem(self.remove_text_from_cell_txt)
        self.object_option_change.addItem(self.move_text_to_another_cell_txt)
        self.object_option_change.addItem(self.serch_move_text_to_another_cell_txt)
        self.object_option_change.addItem(self.add_text_after_text_cell_txt)

    # –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    def btn_start_change(self):
        self.work_sheet = self.work_book[self.object_sheet.currentText()] # –ø–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        self.column_name = self.object_columns.currentText() # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã
        self.output_widget.clear() # –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        method = self.object_option_change.currentText()  # –ø–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        
        #+ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ —è—á–µ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if method == self.add_text_to_cell_start_txt:
            past_text = self.object_past.toPlainText()
            obj_search_text = self.object_search_text_2.toPlainText()
            write = self.add_text_to_cell_start(cell_past=past_text, text=obj_search_text)
            for string in write:
                self.output_widget.appendPlainText(string)
                print(string)

        #+ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É
        if method == self.add_text_to_cell_end_txt:
            past_text = self.object_past.toPlainText()
            obj_text = self.object_search_text_2.toPlainText()
            write = self.add_text_to_column(cell_past=past_text, text=obj_text)
            for string in write:
                self.output_widget.appendPlainText(string)
                print(string)

        #+ —É–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ –≤—Å–µ—Ö —è—á–µ–π–∫ –≤ —Å—Ç–æ–ª–±—Ü–µ
        if method == self.remove_text_from_cell_txt:
            remove_text = self.object_copy.toPlainText()
            obj_text = self.object_search_text_2.toPlainText()
            remove = self.remove_text_from_cell(cell_remove=remove_text, text=obj_text)
            for string in remove:
                self.output_widget.appendPlainText(string)
                print(string)

        # --- —É–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ –≤—Å–µ—Ö —è—á–µ–π–∫ –≤ —Å—Ç–æ–ª–±—Ü–µ
        if method == self.add_text_after_text_cell_txt:
            cell_past = self.object_past.toPlainText()
            after_text = self.object_after_text.toPlainText()
            text_past = self.object_search_text_2.toPlainText()
            remove = self.add_text_after_text_cell(cell_past=cell_past, after_text=after_text, text_past=text_past)
            for string in remove:
                self.output_widget.appendPlainText(string)
                print(string)

        #+ –≤—ã—Ä–µ–∑–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å –æ–¥–Ω–æ–π —è—á–µ–µ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥—Ä—É–≥—É—é —è—á–µ–π–∫—É
        if method == self.move_text_to_another_cell_txt:
            copy = self.object_copy.toPlainText()
            past = self.object_past.toPlainText()
            remove = self.move_text_to_another_cell(cell_move=copy, cell_past=past)
            for string in remove:
                self.output_widget.appendPlainText(string)
                print(string)

        # —É–¥–∞—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ —Å —è—á–µ–π–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥—Ä—É–≥—É—é —è—á–µ–π–∫—É
        if method == self.serch_move_text_to_another_cell_txt:
            copy = self.object_copy.toPlainText()
            past = self.object_past.toPlainText()
            obj_text = self.object_search_text_2.toPlainText()
            search_text = [text for text in obj_text.split('::')]

            remove = self.serch_move_text_to_another_cell(cell_move=copy, cell_past=past, method_remove='str', search=search_text)
            for string in remove:
                self.output_widget.appendPlainText(string)
                print(string)
                
        # –æ–±—å—è–¥–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
            # self.join_columns_text(save_column='AH', join_columns=['AE', 'AF', 'AG'], join_separator=' x ', end_text='—Å–º')